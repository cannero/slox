// Autogenerated by generateAst.fsx

import Foundation

protocol ExprVisitor {
    associatedtype ExprVisitorReturn
    func visitBinaryExpr(_ expr: Binary) throws -> ExprVisitorReturn
    func visitGroupingExpr(_ expr: Grouping) throws -> ExprVisitorReturn
    func visitLiteralExpr(_ expr: Literal) throws -> ExprVisitorReturn
    func visitUnaryExpr(_ expr: Unary) throws -> ExprVisitorReturn
}

class Expr : Equatable {
   func accept<V: ExprVisitor, R>(visitor: V) throws -> R where R == V.ExprVisitorReturn {
        preconditionFailure("base class cannot be used directly")
    }

    static func == (lhs: Expr, rhs: Expr) -> Bool {
        lhs.isEqualTo(rhs)
    }

    func isEqualTo (_ other: Expr) -> Bool {
        preconditionFailure("base class cannot be used directly")
    }
}

class Binary : Expr {
    let left: Expr
    let op: Token
    let right: Expr

    init(left: Expr, op: Token, right: Expr) {
        self.left = left
        self.op = op
        self.right = right
    }

    override func accept<V: ExprVisitor, R>(visitor: V) throws -> R where R == V.ExprVisitorReturn {
        try visitor.visitBinaryExpr(self)
    }

    override func isEqualTo (_ other: Expr) -> Bool {
        guard let other = other as? Binary else {return false}
        return left == other.left &&
               op == other.op &&
               right == other.right
    }
}

class Grouping : Expr {
    let expression: Expr

    init(expression: Expr) {
        self.expression = expression
    }

    override func accept<V: ExprVisitor, R>(visitor: V) throws -> R where R == V.ExprVisitorReturn {
        try visitor.visitGroupingExpr(self)
    }

    override func isEqualTo (_ other: Expr) -> Bool {
        guard let other = other as? Grouping else {return false}
        return expression == other.expression
    }
}

class Literal : Expr {
    let value: LiteralValue?

    init(value: LiteralValue?) {
        self.value = value
    }

    override func accept<V: ExprVisitor, R>(visitor: V) throws -> R where R == V.ExprVisitorReturn {
        try visitor.visitLiteralExpr(self)
    }

    override func isEqualTo (_ other: Expr) -> Bool {
        guard let other = other as? Literal else {return false}
        return value == other.value
    }
}

class Unary : Expr {
    let op: Token
    let right: Expr

    init(op: Token, right: Expr) {
        self.op = op
        self.right = right
    }

    override func accept<V: ExprVisitor, R>(visitor: V) throws -> R where R == V.ExprVisitorReturn {
        try visitor.visitUnaryExpr(self)
    }

    override func isEqualTo (_ other: Expr) -> Bool {
        guard let other = other as? Unary else {return false}
        return op == other.op &&
               right == other.right
    }
}

